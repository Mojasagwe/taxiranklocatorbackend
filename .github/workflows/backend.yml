name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'settings.gradle'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'settings.gradle'
      - '.github/workflows/backend.yml'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for better code quality analysis
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 8.12.1
    
    - name: Run tests
      run: ./gradlew test --info
      env:
        SPRING_PROFILES_ACTIVE: test
    
    - name: Build with Gradle
      run: ./gradlew build -x test --info
      env:
        SPRING_PROFILES_ACTIVE: test
        
    - name: SonarQube Scan
      if: github.event_name != 'pull_request'
      run: ./gradlew sonarqube -x test
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: build/reports/tests/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: build/libs/*.jar
        if-no-files-found: error

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Run dependency vulnerability check
      run: ./gradlew dependencyCheckAnalyze
      continue-on-error: true
    
    - name: Upload vulnerability report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-report
        path: build/reports/dependency-check-report.html
        if-no-files-found: ignore

  deploy-to-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app
        
    - name: List files
      run: ls -la app/
      
    # Deployment steps would go here
    # For example:
    # - Using AWS CLI to deploy to Elastic Beanstalk
    # - Using SSH to deploy to EC2
    # - Using container registry to push Docker images
    
    - name: Deploy to Dev (Placeholder)
      run: echo "Deploying to development environment"
      # Replace with actual deployment commands when ready

